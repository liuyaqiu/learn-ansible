# ============================================================================
# GitHub Actions - Ansible CI/CD Pipeline
# ============================================================================
# Triggers: Push to main/develop, Pull Requests, Manual workflow dispatch
# Features: Multi-OS testing, caching, security scanning, comprehensive validation
# ============================================================================

name: 🚀 Ansible CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - "playbooks/**"
      - "roles/**"
      - "group_vars/**"
      - "inventories/**"
      - "ansible.cfg"
      - "requirements.yml"
      - ".github/workflows/ansible-ci.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "playbooks/**"
      - "roles/**"
      - "group_vars/**"
      - "inventories/**"
      - "ansible.cfg"
      - "requirements.yml"
  workflow_dispatch:
    inputs:
      run_tests:
        description: "Run validation tests"
        required: false
        default: true
        type: boolean
      run_security:
        description: "Run security checks"
        required: false
        default: true
        type: boolean

env:
  ANSIBLE_FORCE_COLOR: true
  ANSIBLE_HOST_KEY_CHECKING: false
  PY_COLORS: 1
  ANSIBLE_LINT_NODEPS: 1

# Global permissions for all jobs
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ============================================================================
  # Lint and Syntax Checking
  # ============================================================================
  lint:
    name: 🔍 Lint & Syntax Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        ansible-version: [">=6.0.0,<7.0.0", ">=7.0.0,<8.0.0"]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: 🔧 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "ansible${{ matrix.ansible-version }}"
          pip install ansible-lint yamllint jinja2 pre-commit
          pip install molecule molecule-plugins[docker] pytest-testinfra
          npm install -g prettier

      - name: 📦 Install Ansible collections
        run: |
          # Create logs directory to prevent warnings
          mkdir -p logs
          # Clear ansible-compat cache to avoid conflicts
          rm -rf ~/.cache/ansible-compat/
          # Install collections with better error handling
          ansible-galaxy collection install -r requirements.yml --force
          # Set environment variable to help ansible-lint find collections
          echo "ANSIBLE_COLLECTIONS_PATH=~/.ansible/collections:/usr/share/ansible/collections" >> $GITHUB_ENV
        continue-on-error: false

      - name: 🔧 Setup Makefile dependencies (optional)
        run: |
          if [ -f Makefile ]; then
            make install-deps || echo "Makefile install-deps completed with warnings"
          fi
        continue-on-error: true

      - name: 📝 Display versions
        run: |
          echo "Python: $(python --version)"
          echo "Ansible: $(ansible --version)"
          echo "Ansible-lint: $(ansible-lint --version)"
          echo "YAMLlint: $(yamllint --version)"

      - name: 🔍 Complete Lint Check
        run: |
          # Set environment variables for ansible-lint
          export ANSIBLE_COLLECTIONS_PATH=~/.ansible/collections:/usr/share/ansible/collections
          export ANSIBLE_LINT_NODEPS=1

          # Use our improved Makefile lint target if available
          if [ -f Makefile ]; then
            echo "🚀 Using Makefile lint target..."
            make lint
          else
            echo "🔍 Running manual lint checks..."
            yamllint playbooks/ roles/ group_vars/ inventories/
            prettier --check "**/*.{yml,yaml,json,md}" --ignore-path .prettierignore
            for playbook in playbooks/*.yml; do
              echo "🔍 Checking syntax: $playbook"
              ansible-playbook --syntax-check -i inventories/dev "$playbook"
            done
            # Clear ansible-compat cache before running ansible-lint
            rm -rf ~/.cache/ansible-compat/
            ansible-lint --offline playbooks/ roles/
          fi

      - name: 📋 Inventory Validation
        run: |
          for env in dev prod staging; do
            echo "🔍 Validating $env inventory..."
            ansible-inventory -i inventories/$env --list > /dev/null
          done

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.run_security != 'false' }}
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for secrets
        run: |
          if [ -f scripts/security-scan.sh ]; then
            echo "🔍 Running security scan script..."
            bash scripts/security-scan.sh
          else
            echo "🔍 Running basic security checks..."
            # Check for hardcoded passwords (exclude Ansible variable references)
            password_matches=$(grep -r -n "password.*:" playbooks/ roles/ --include="*.yml" --include="*.yaml" 2>/dev/null | grep -v "{{.*}}" | grep -v "#" || true)
            if [[ -n "$password_matches" ]]; then
              echo "$password_matches"
              echo "❌ Potential hardcoded passwords found!"
              exit 1
            fi

            # Check for SSH keys in code
            private_key_matches=$(grep -r -n "-----BEGIN.*PRIVATE KEY-----" playbooks/ roles/ --include="*.yml" --include="*.yaml" 2>/dev/null || true)
            if [[ -n "$private_key_matches" ]]; then
              echo "$private_key_matches"
              echo "❌ Private keys found in code!"
              exit 1
            fi

            echo "✅ No obvious secrets found"
          fi

      - name: 🛡️ Run Trivy vulnerability scanner (JSON output)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "json"
          output: "trivy-results.json"
        continue-on-error: true

      - name: 📊 Process Trivy Results
        if: always() && hashFiles('trivy-results.json') != ''
        run: |
          echo "🔍 Trivy Security Scan Results:"
          if [ -f trivy-results.json ]; then
            # Check if there are any HIGH or CRITICAL vulnerabilities
            high_critical=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | .VulnerabilityID' trivy-results.json 2>/dev/null | wc -l)
            total_vulns=$(jq -r '.Results[]?.Vulnerabilities[]? | .VulnerabilityID' trivy-results.json 2>/dev/null | wc -l)
            
            echo "📊 Total vulnerabilities found: $total_vulns"
            echo "🔴 High/Critical vulnerabilities: $high_critical"
            
            if [ "$high_critical" -gt 0 ]; then
              echo "⚠️ High or Critical vulnerabilities detected!"
              echo "🔍 Details:"
              jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "- \(.VulnerabilityID): \(.Title) (\(.Severity))"' trivy-results.json 2>/dev/null | head -10
            else
              echo "✅ No high or critical vulnerabilities found"
            fi
          else
            echo "ℹ️ No vulnerability results to process"
          fi

      - name: 📤 Upload Trivy Results as Artifact
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('trivy-results.json') != ''
        with:
          name: trivy-security-results
          path: trivy-results.json
          retention-days: 30

      - name: 🛡️ Attempt SARIF Upload (Optional)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
        continue-on-error: true

      - name: 📊 Upload SARIF to GitHub Security (Optional)
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-security-scan"
        continue-on-error: true

  # ============================================================================
  # Functional Testing
  # ============================================================================
  test:
    name: 🧪 Functional Tests
    runs-on: ubuntu-latest
    needs: [lint]
    if: ${{ github.event.inputs.run_tests != 'false' }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 🔧 Install Ansible
        run: |
          pip install ansible ansible-lint

      - name: 🏗️ Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-libvirt

      - name: 📋 Run validation playbook
        run: |
          ansible-playbook -i inventories/dev playbooks/validate-config.yml

      - name: 🧪 Test playbooks in check mode
        run: |
          # Test destroy playbook (safe in check mode)
          ansible-playbook --check -i inventories/dev playbooks/vm-destroy.yml

          # Test validate playbook
          ansible-playbook --check -i inventories/dev playbooks/validate-config.yml

  # ============================================================================
  # Multi-OS Testing
  # ============================================================================
  test-os:
    name: 🖥️ Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [lint]
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-latest]
      fail-fast: false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 🔧 Install Ansible
        run: |
          pip install ansible

      - name: ✅ Syntax check on ${{ matrix.os }}
        run: |
          ansible-playbook --syntax-check -i inventories/dev playbooks/validate-config.yml

  # ============================================================================
  # Report Generation
  # ============================================================================
  report:
    name: 📊 Generate Report
    runs-on: ubuntu-latest
    needs: [lint, security, test, test-os]
    if: always()
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Create CI Report
        run: |
          echo "# 🚀 Ansible CI/CD Pipeline Report" > ci-report.md
          echo "" >> ci-report.md
          echo "## 📋 Pipeline Summary" >> ci-report.md
          echo "- **Commit**: ${{ github.sha }}" >> ci-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> ci-report.md
          echo "- **Trigger**: ${{ github.event_name }}" >> ci-report.md
          echo "- **Run ID**: ${{ github.run_id }}" >> ci-report.md
          echo "" >> ci-report.md
          echo "## ✅ Job Status" >> ci-report.md
          echo "- Lint & Syntax: ${{ needs.lint.result }}" >> ci-report.md
          echo "- Security Scan: ${{ needs.security.result }}" >> ci-report.md
          echo "- Functional Tests: ${{ needs.test.result }}" >> ci-report.md
          echo "- Multi-OS Tests: ${{ needs.test-os.result }}" >> ci-report.md
          echo "" >> ci-report.md
          echo "## 📁 Files Checked" >> ci-report.md
          echo "\`\`\`" >> ci-report.md
          find playbooks/ roles/ group_vars/ inventories/ -name "*.yml" -o -name "*.yaml" | sort >> ci-report.md
          echo "\`\`\`" >> ci-report.md

      - name: 📤 Upload CI Report
        uses: actions/upload-artifact@v4
        with:
          name: ci-report
          path: ci-report.md

      - name: 💬 Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('ci-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
