# ============================================================================
# GitLab CI - Ansible Pipeline
# ============================================================================
# Features: Multi-stage pipeline, caching, parallel jobs, artifact collection
# Stages: lint, security, test, deploy
# ============================================================================

stages:
  - 🔍 lint
  - 🔒 security
  - 🧪 test
  - 📊 report

# ============================================================================
# Global Configuration
# ============================================================================
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  ANSIBLE_FORCE_COLOR: "true"
  ANSIBLE_HOST_KEY_CHECKING: "false"

# Cache configuration
cache:
  paths:
    - .cache/pip/
    - venv/

# Default image
default:
  image: python:3.10-slim

# Before script for all jobs
before_script:
  - echo "🚀 Installing all dependencies (system + development) via Makefile..."
  - make install-ci-deps

# ============================================================================
# Lint Stage
# ============================================================================
comprehensive-lint:
  stage: 🔍 lint
  script:
    - echo "🚀 Using Makefile for comprehensive linting..."
    - make lint
  artifacts:
    when: always
    expire_in: 1 week
  rules:
    - changes:
        - "**/*.yml"
        - "**/*.yaml"
        - ".gitlab-ci.yml"
        - "Makefile"
        - "playbooks/**"
        - "roles/**"
        - "group_vars/**"
        - "inventories/**"
        - "ansible.cfg"

inventory-validation:
  stage: 🔍 lint
  script:
    - echo "🚀 Using Makefile for inventory validation..."
    - make inventory-check
  rules:
    - changes:
        - "inventories/**"
        - "group_vars/**"

# ============================================================================
# Security Stage
# ============================================================================
security-scan:
  stage: 🔒 security
  script:
    - echo "🚀 Using Makefile for security scanning..."
    - make security-check
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# ============================================================================
# Test Stage
# ============================================================================
functional-test:
  stage: 🧪 test
  before_script:
    - echo "🚀 Installing all dependencies (system + development) via Makefile..."
    - make install-ci-deps
  script:
    - echo "🚀 Using Makefile for functional testing..."
    - make test
  artifacts:
    when: always
    expire_in: 1 week
  rules:
    - changes:
        - "playbooks/**"
        - "roles/**"
        - "group_vars/**"
        - "inventories/**"
        - "Makefile"

# Parallel testing on different Python versions
.test-template: &test-template
  stage: 🧪 test
  before_script:
    - echo "🚀 Installing all dependencies (system + development) via Makefile..."
    - make install-ci-deps
  script:
    - echo "🚀 Using Makefile for validation testing..."
    - make test-validate
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.9", "3.10", "3.11"]
  image: python:${PYTHON_VERSION}-slim
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

python-compatibility:
  <<: *test-template

# ============================================================================
# Report Stage
# ============================================================================
generate-report:
  stage: 📊 report
  script:
    - echo "📊 Generating pipeline report..."
    - |
      cat > pipeline-report.md << EOF
      # 🚀 Ansible CI/CD Pipeline Report

      ## 📋 Pipeline Summary
      - **Commit**: ${CI_COMMIT_SHA}
      - **Branch**: ${CI_COMMIT_REF_NAME}
      - **Pipeline ID**: ${CI_PIPELINE_ID}
      - **Trigger**: ${CI_PIPELINE_SOURCE}
      - **User**: ${GITLAB_USER_NAME}

      ## 📁 Files Processed
      \`\`\`
      $(find playbooks/ roles/ group_vars/ inventories/ -name "*.yml" -o -name "*.yaml" | sort)
      \`\`\`

      ## 🔗 Links
      - [Pipeline](${CI_PIPELINE_URL})
      - [Commit](${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHA})
      EOF
  artifacts:
    paths:
      - pipeline-report.md
    expire_in: 1 month
  when: always
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"

# ============================================================================
# Pages (for GitLab Pages integration)
# ============================================================================
pages:
  stage: 📊 report
  script:
    - mkdir public
    - cp pipeline-report.md public/index.md
    - echo "<html><body><pre>$(cat pipeline-report.md)</pre></body></html>" > public/index.html
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  needs:
    - generate-report

# ============================================================================
# Manual Jobs
# ============================================================================
manual-full-test:
  stage: 🧪 test
  script:
    - echo "🧪 Running comprehensive manual tests..."
    - |
      if [ -f Makefile ]; then
        echo "🚀 Using Makefile CI target..."
        make ci
      else
        echo "⚠️ Makefile not found, running basic tests..."
        ansible-playbook --syntax-check -i inventories/dev playbooks/validate-config.yml
        ansible-playbook -i inventories/dev playbooks/validate-config.yml
      fi
  when: manual
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# Additional job to test Makefile integration
makefile-integration:
  stage: 🧪 test
  script:
    - echo "🔧 Testing Makefile integration..."
    - |
      if [ -f Makefile ]; then
        echo "📋 Available Makefile targets:"
        make help
        echo "🧪 Running lint-fix..."
        make lint-fix || echo "lint-fix completed with warnings"
        echo "🛡️ Running security check..."
        make security-check
      else
        echo "⚠️ Makefile not found, skipping integration test"
      fi
  allow_failure: true
  rules:
    - changes:
        - "Makefile"
        - "scripts/**"
