---
# ============================================================================
# KVM VM Role - Create/Ensure VM Present
# ============================================================================

- name: Download Ubuntu cloud image if not present
  get_url:
    url: "{{ kvm_cloud_img_url }}"
    dest: "{{ _kvm_cloud_img_path }}"
    mode: '0644'
    force: no
  become: yes

- name: Ensure cloud image has correct permissions
  file:
    path: "{{ _kvm_cloud_img_path }}"
    owner: root
    group: root
    mode: '0644'
  become: yes

- name: Create qcow2 overlay disk for the VM
  command: >
    qemu-img create
    -f qcow2
    -F qcow2
    -b {{ _kvm_cloud_img_path }}
    {{ _kvm_vm_disk_path }}
    {{ kvm_vm_disk_size }}G
  args:
    creates: "{{ _kvm_vm_disk_path }}"
  become: yes

- name: Ensure overlay disk has correct permissions
  file:
    path: "{{ _kvm_vm_disk_path }}"
    owner: libvirt-qemu
    group: kvm
    mode: '0640'
  become: yes

- name: Remove existing cloud-init files to force regeneration
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ _kvm_user_data_path }}"
    - "{{ _kvm_meta_data_path }}"
    - "{{ _kvm_seed_img_path }}"
  become: yes

- name: Generate cloud-init configuration files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0644'
  loop:
    - { src: 'user-data.j2', dest: "{{ _kvm_user_data_path }}" }
    - { src: 'network-config.j2', dest: "{{ _kvm_network_config_path }}" }
    - { src: 'meta-data.j2', dest: "{{ _kvm_meta_data_path }}" }
  become: yes

- name: Generate seed.img (cloud-init ISO) from user-data and meta-data
  command: >
    cloud-localds -N {{ _kvm_network_config_path }} {{ _kvm_seed_img_path }} {{ _kvm_user_data_path }} {{ _kvm_meta_data_path }}
  args:
    creates: "{{ _kvm_seed_img_path }}"
  become: yes

- name: Ensure seed image has correct permissions
  file:
    path: "{{ _kvm_seed_img_path }}"
    owner: libvirt-qemu
    group: kvm
    mode: '0640'
  become: yes

- name: Check if VM already exists
  community.libvirt.virt:
    name: "{{ kvm_vm_name }}"
    command: status
  register: _kvm_vm_status
  ignore_errors: true
  become: yes

- name: Create the KVM virtual machine using virt-install (if not exists)
  command: >
    virt-install
    --name {{ kvm_vm_name }}
    --memory {{ kvm_vm_memory }}
    --vcpus {{ kvm_vm_vcpus }}
    --disk path={{ _kvm_vm_disk_path }},format=qcow2,cache=none,bus=virtio
    --disk path={{ _kvm_seed_img_path }},device=cdrom,bus=sata
    --os-type linux --os-variant ubuntu24.04
    --import
    --network bridge={{ kvm_vm_bridge }},model=virtio
    --noautoconsole
    --wait 0
  when: _kvm_vm_status is failed or kvm_force_recreate
  become: yes

- name: Ensure VM is running
  community.libvirt.virt:
    name: "{{ kvm_vm_name }}"
    state: running
  become: yes
